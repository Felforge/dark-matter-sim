//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-35404655
// Cuda compilation tools, release 12.8, V12.8.61
// Based on NVVM 7.0.1
//

.version 8.7
.target sm_52
.address_size 64

	// .globl	poisson_solver

.visible .entry poisson_solver(
	.param .u64 poisson_solver_param_0,
	.param .u64 poisson_solver_param_1,
	.param .u32 poisson_solver_param_2
)
{
	.reg .pred 	%p<6>;
	.reg .f32 	%f<16>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd3, [poisson_solver_param_0];
	ld.param.u64 	%rd4, [poisson_solver_param_1];
	ld.param.u32 	%r3, [poisson_solver_param_2];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	mul.lo.s32 	%r2, %r3, %r3;
	mul.lo.s32 	%r7, %r2, %r3;
	setp.ge.s32 	%p1, %r1, %r7;
	@%p1 bra 	$L__BB0_4;

	div.s32 	%r8, %r1, %r2;
	rem.s32 	%r9, %r8, %r3;
	div.s32 	%r10, %r1, %r3;
	rem.s32 	%r11, %r10, %r3;
	shr.u32 	%r12, %r3, 31;
	add.s32 	%r13, %r3, %r12;
	shr.s32 	%r14, %r13, 1;
	setp.gt.s32 	%p2, %r9, %r14;
	selp.b32 	%r15, %r3, 0, %p2;
	sub.s32 	%r16, %r9, %r15;
	cvt.rn.f32.s32 	%f2, %r16;
	setp.gt.s32 	%p3, %r11, %r14;
	selp.b32 	%r17, %r3, 0, %p3;
	sub.s32 	%r18, %r11, %r17;
	cvt.rn.f32.s32 	%f3, %r18;
	mul.lo.s32 	%r19, %r10, %r3;
	sub.s32 	%r20, %r1, %r19;
	setp.gt.s32 	%p4, %r20, %r14;
	selp.b32 	%r21, %r3, 0, %p4;
	sub.s32 	%r22, %r20, %r21;
	cvt.rn.f32.s32 	%f4, %r22;
	mul.f32 	%f5, %f3, %f3;
	fma.rn.f32 	%f6, %f2, %f2, %f5;
	fma.rn.f32 	%f1, %f4, %f4, %f6;
	setp.gt.f32 	%p5, %f1, 0f00000000;
	cvt.s64.s32 	%rd1, %r1;
	cvta.to.global.u64 	%rd5, %rd4;
	mul.wide.s32 	%rd6, %r1, 8;
	add.s64 	%rd2, %rd5, %rd6;
	@%p5 bra 	$L__BB0_3;
	bra.uni 	$L__BB0_2;

$L__BB0_3:
	cvta.to.global.u64 	%rd7, %rd3;
	shl.b64 	%rd8, %rd1, 3;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.v2.f32 	{%f8, %f9}, [%rd9];
	neg.f32 	%f12, %f8;
	neg.f32 	%f13, %f9;
	div.rn.f32 	%f14, %f13, %f1;
	div.rn.f32 	%f15, %f12, %f1;
	st.global.v2.f32 	[%rd2], {%f15, %f14};
	bra.uni 	$L__BB0_4;

$L__BB0_2:
	mov.f32 	%f7, 0f00000000;
	st.global.v2.f32 	[%rd2], {%f7, %f7};

$L__BB0_4:
	ret;

}
	// .globl	compute_displacement
.visible .entry compute_displacement(
	.param .u64 compute_displacement_param_0,
	.param .u64 compute_displacement_param_1,
	.param .u64 compute_displacement_param_2,
	.param .u64 compute_displacement_param_3,
	.param .u32 compute_displacement_param_4
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<19>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<14>;


	ld.param.u64 	%rd1, [compute_displacement_param_0];
	ld.param.u64 	%rd2, [compute_displacement_param_1];
	ld.param.u64 	%rd3, [compute_displacement_param_2];
	ld.param.u64 	%rd4, [compute_displacement_param_3];
	ld.param.u32 	%r3, [compute_displacement_param_4];
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r1, %r5, %r4, %r6;
	mul.lo.s32 	%r2, %r3, %r3;
	mul.lo.s32 	%r7, %r2, %r3;
	setp.ge.s32 	%p1, %r1, %r7;
	@%p1 bra 	$L__BB1_2;

	div.s32 	%r8, %r1, %r2;
	rem.s32 	%r9, %r8, %r3;
	div.s32 	%r10, %r1, %r3;
	rem.s32 	%r11, %r10, %r3;
	shr.u32 	%r12, %r3, 31;
	add.s32 	%r13, %r3, %r12;
	shr.s32 	%r14, %r13, 1;
	setp.gt.s32 	%p2, %r9, %r14;
	selp.b32 	%r15, %r3, 0, %p2;
	sub.s32 	%r16, %r9, %r15;
	cvt.rn.f32.s32 	%f1, %r16;
	setp.gt.s32 	%p3, %r11, %r14;
	selp.b32 	%r17, %r3, 0, %p3;
	sub.s32 	%r18, %r11, %r17;
	cvt.rn.f32.s32 	%f2, %r18;
	mul.lo.s32 	%r19, %r10, %r3;
	sub.s32 	%r20, %r1, %r19;
	setp.gt.s32 	%p4, %r20, %r14;
	selp.b32 	%r21, %r3, 0, %p4;
	sub.s32 	%r22, %r20, %r21;
	cvt.rn.f32.s32 	%f3, %r22;
	cvta.to.global.u64 	%rd5, %rd1;
	mul.wide.s32 	%rd6, %r1, 8;
	add.s64 	%rd7, %rd5, %rd6;
	ld.global.f32 	%f4, [%rd7+4];
	mul.f32 	%f5, %f4, %f1;
	neg.f32 	%f6, %f5;
	cvta.to.global.u64 	%rd8, %rd2;
	add.s64 	%rd9, %rd8, %rd6;
	st.global.f32 	[%rd9], %f6;
	ld.global.f32 	%f7, [%rd7];
	mul.f32 	%f8, %f7, %f1;
	st.global.f32 	[%rd9+4], %f8;
	ld.global.f32 	%f9, [%rd7+4];
	mul.f32 	%f10, %f9, %f2;
	neg.f32 	%f11, %f10;
	cvta.to.global.u64 	%rd10, %rd3;
	add.s64 	%rd11, %rd10, %rd6;
	st.global.f32 	[%rd11], %f11;
	ld.global.f32 	%f12, [%rd7];
	mul.f32 	%f13, %f12, %f2;
	st.global.f32 	[%rd11+4], %f13;
	ld.global.f32 	%f14, [%rd7+4];
	mul.f32 	%f15, %f14, %f3;
	neg.f32 	%f16, %f15;
	cvta.to.global.u64 	%rd12, %rd4;
	add.s64 	%rd13, %rd12, %rd6;
	st.global.f32 	[%rd13], %f16;
	ld.global.f32 	%f17, [%rd7];
	mul.f32 	%f18, %f17, %f3;
	st.global.f32 	[%rd13+4], %f18;

$L__BB1_2:
	ret;

}

